pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '084828598848'
        AWS_REGION = 'us-east-1'
        ECR_REPO = 'devops-project/github-jenkins-docker-trivy-ecs'
        BACKEND_IMAGE_TAG = 'backend'
        FRONTEND_IMAGE_TAG = 'frontend'
        FRONTEND_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${FRONTEND_IMAGE_TAG}"
        BACKEND_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BACKEND_IMAGE_TAG}"
    }
    stages {
        stage('Clone Repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-creds', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PAT')]) {
                    git url: "https://${GIT_USERNAME}:${GIT_PAT}@github.com/${GIT_USERNAME}/Github-Jenkins-Docker-ECR-Trivy-ECS", branch: 'main'
                }
            }
        }
        stage('Build and Push Docker Images') {
            steps {
                withAWS(credentials: 'aws-creds', region: "${AWS_REGION}") {  // Uses the installed plugin
                    script {
                        // Log in to ECR (AWS CLI is provided by the plugin)
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | \
                            docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                        // Build and push frontend
                        dir('frontend') {
                            sh "docker build -t ${FRONTEND_IMAGE} ."
                            sh "docker push ${FRONTEND_IMAGE}"
                        }
                        // Build and push backend
                        dir('backend') {
                            sh "docker build -t ${BACKEND_IMAGE} ."
                            sh "docker push ${BACKEND_IMAGE}"
                        }
                    }
                }
            }
        }
        stage('Redeploy Backend ECS Service') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
                    sh '''
                        aws ecs update-service \
                          --cluster Cluster-Fargate \
                          --service Backend-Task-Definition-service-2ksfhy5a \
                          --force-new-deployment
                    '''
                }
            }
        }
    }
}
